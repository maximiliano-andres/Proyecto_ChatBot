name: Revisión de dependencias y vulnerabilidades

on:
  workflow_dispatch:
  push:
    branches:
      - '**'
  pull_request:
    branches:
      - '**'

jobs:
  revisar_dependencias:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout del código
        uses: actions/checkout@v3

      - name: Instalar Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Instalar dependencias
        run: npm install

      - name: Listar todas las dependencias instaladas
        run: npm list --all

      - name: Correr npm audit y crear reporte por nivel de vulnerabilidad
        run: |
          npm audit --json > audit.json
          node <<'EOF'
          const fs = require('fs');
          const audit = JSON.parse(fs.readFileSync('audit.json', 'utf8'));
          const levels = { critical: [], high: [], moderate: [], low: [], none: [] };
          const dependencies = [];
          try {
            const list = JSON.parse(require('child_process').execSync('npm ls --json').toString());
            function collectDeps(obj) {
              if (obj.dependencies) {
                Object.entries(obj.dependencies).forEach(([name, dep]) => {
                  dependencies.push(name);
                  collectDeps(dep);
                });
              }
            }
            collectDeps(list);
          } catch (e) {}
          if (audit.vulnerabilities) {
            Object.values(audit.vulnerabilities).forEach(vuln => {
              const level = vuln.severity || 'none';
              if (levels[level]) levels[level].push(vuln.name);
            });
          }
          let output = '';
          output += 'Dependencias con Vulnerabilidad Crítica/Alta\n';
          const high = Array.from(new Set([...levels.critical, ...levels.high]));
          if (high.length) high.forEach(dep => output += '- ' + dep + '\n');
          else output += 'Sin resultados.\n';
          output += '\nDependencias con Vulnerabilidad Media\n';
          if (levels.moderate.length) levels.moderate.forEach(dep => output += '- ' + dep + '\n');
          else output += 'Sin resultados.\n';
          output += '\nDependencias con Vulnerabilidad Baja o Sin Vulnerabilidad\n';
          const lowOrNone = dependencies.filter(dep =>
            !high.includes(dep) && !levels.moderate.includes(dep)
          );
          if (lowOrNone.length) lowOrNone.forEach(dep => output += '- ' + dep + '\n');
          else output += 'Sin resultados.\n';
          fs.writeFileSync('reporte.txt', output);
          EOF

      - name: Instalar pdfkit para reporte PDF
        run: npm install pdfkit

      - name: Generar reporte PDF de dependencias
        run: |
          node <<'EOF'
          const fs = require('fs');
          const PDFDocument = require('pdfkit');
          const audit = JSON.parse(fs.readFileSync('audit.json', 'utf8'));

          const doc = new PDFDocument({ margin: 30 });
          doc.pipe(fs.createWriteStream('reporte_dependencias.pdf'));

          // Título principal
          doc.fontSize(20).text('Reporte de Dependencias y Vulnerabilidades', { align: 'center' });
          doc.moveDown();

          const colorMap = {
            critical: 'red',
            high: 'red',
            moderate: 'orange',
            low: 'green',
            none: 'blue',
          };

          const levels = { critical: [], high: [], moderate: [], low: [], none: [] };

          // Recolectar datos
          if (audit.vulnerabilities) {
            Object.values(audit.vulnerabilities).forEach(vuln => {
              const level = vuln.severity || 'none';
              if (levels[level]) levels[level].push({
                name: vuln.name,
                version: vuln.installed || 'desconocida',
                via: vuln.via.map(v => typeof v === 'string' ? v : v.source).join(', '),
                path: vuln.nodes ? vuln.nodes.join(' > ') : 'N/A',
                severity: level
              });
            });
          }

          // Generar tablas por nivel
          Object.entries(levels).forEach(([nivel, lista]) => {
            const color = colorMap[nivel] || 'black';
            doc.addPage();
            doc.fillColor(color).fontSize(16).text(`Vulnerabilidades: ${nivel.toUpperCase()}`, { underline: true });
            doc.moveDown().fillColor('black').fontSize(12);

            if (!lista.length) {
              doc.fillColor('gray').text('Sin resultados').fillColor('black');
              return;
            }

            lista.forEach(dep => {
              doc
                .fillColor(color)
                .text(`• ${dep.name} (${dep.version})`)
                .fillColor('black')
                .text(`   ↳ Vía: ${dep.via}`)
                .text(`   ↳ Path: ${dep.path}`)
                .moveDown();
            });
          });

          doc.end();
          EOF


      - name: Subir reporte de dependencias (TXT)
        uses: actions/upload-artifact@v4
        with:
          name: reporte-dependencias-txt
          path: reporte.txt

      - name: Subir reporte de dependencias (PDF)
        uses: actions/upload-artifact@v4
        with:
          name: reporte-dependencias-pdf
          path: reporte_dependencias.pdf


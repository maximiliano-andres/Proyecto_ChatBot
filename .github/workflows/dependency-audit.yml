name: Auditoría de Dependencias y Generación de PDF

on:
  workflow_dispatch:
  push:
    branches: 
      - '**'
  pull_request:
    branches:
      - '**'

jobs:
  audit-dependencies:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Instalar dependencias
        run: npm install

      - name: Auditar dependencias y generar JSON
        run: |
          npm audit --json > audit-report.json

      - name: Obtener lista ordenada de dependencias
        run: |
          npm ls --json --all > deps.json

      - name: Instalar dependencias para generar PDF
        run: npm install -g json2csv pdfkit

      - name: Generar reporte en CSV
        run: |
          node << 'EOF'
          const fs = require('fs');
          const { Parser } = require('json2csv');
          const audit = JSON.parse(fs.readFileSync('audit-report.json'));
          const deps = JSON.parse(fs.readFileSync('deps.json')).dependencies || {};
          const results = [];
          function collectDeps(obj, parent = '') {
            Object.entries(obj).forEach(([name, info]) => {
              results.push({
                name,
                version: info.version,
                path: parent ? `${parent} > ${name}` : name
              });
              if (info.dependencies) collectDeps(info.dependencies, name);
            });
          }
          collectDeps(deps);
          results.sort((a, b) => a.name.localeCompare(b.name));
          // Extrae vulnerabilidades altas y críticas
          const vulns = (audit.advisories || {});
          const vulnMap = {};
          Object.values(vulns).forEach(v => {
            if (['high', 'critical'].includes(v.severity)) {
              (v.findings || []).forEach(f => vulnMap[f.version] = v.severity);
            }
          });
          results.forEach(r => r.severity = vulnMap[r.version] || 'none');
          const parser = new Parser();
          fs.writeFileSync('reporte.csv', parser.parse(results));
          EOF

      - name: Generar PDF con reporte
        run: |
          node << 'EOF'
          const fs = require('fs');
          const PDFDocument = require('pdfkit');
          const csv = fs.readFileSync('reporte.csv').toString().split('\n');
          const headers = csv[0].split(',');
          const rows = csv.slice(1).filter(Boolean).map(line => {
            const cols = line.split(',');
            return {
              name: cols[0],
              version: cols[1],
              path: cols[2],
              severity: cols[3]
            };
          });

          // Clasifica por severidad
          const criticas = rows.filter(r => r.severity === 'critical' || r.severity === 'high');
          const medias = rows.filter(r => r.severity === 'moderate' || r.severity === 'medium');
          const bajas = rows.filter(r => r.severity === 'low' || r.severity === 'none' || !r.severity);

          const doc = new PDFDocument({ margin: 30 });
          doc.pipe(fs.createWriteStream('reporte_dependencias.pdf'));
          doc.fontSize(20).text('Reporte de Dependencias', { align: 'center' });
          doc.moveDown();

          function printTable(title, data) {
            doc.fontSize(16).text(title, { underline: true });
            doc.moveDown(0.5);
            if (data.length === 0) {
              doc.fontSize(12).text('Sin resultados.', { italic: true });
              doc.moveDown();
              return;
            }
            // Imprime encabezados
            doc.fontSize(12).text(headers.join(' | '), { bold: true });
            doc.moveDown(0.2);
            // Imprime filas
            data.forEach(row => {
              doc.text([row.name, row.version, row.path, row.severity].join(' | '));
            });
            doc.moveDown();
          }

          printTable('Dependencias con Vulnerabilidad Crítica/Alta', criticas);
          printTable('Dependencias con Vulnerabilidad Media', medias);
          printTable('Dependencias con Vulnerabilidad Baja o Sin Vulnerabilidad', bajas);

          doc.end();
          EOF

      - name: Subir reporte como artefacto
        uses: actions/upload-artifact@v4
        with:
          name: reporte_dependencias
          path: reporte_dependencias.pdf
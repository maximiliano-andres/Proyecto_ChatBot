# 🚀 Raíz Financiera - ChatBot Bancario

> Plataforma bancaria web con asistente virtual, contratos digitales y panel de administración. ¡Moderna, segura y lista para producción!

---

## ✨ Características principales

- 🤖 **Chatbot inteligente:** Responde consultas sobre productos financieros, requisitos y procesos.
- 🔐 **Registro e inicio de sesión:** Autenticación segura con JWT y cookies.
- 👤 **Gestión de usuarios:** Registro, login, perfiles y cierre de sesión.
- 📄 **Contratos digitales:** Generación y visualización de contratos PDF con firma digital simulada.
- 💳 **Productos financieros:** Solicitud y gestión de préstamos, tarjetas y seguros.
- 🛡️ **Panel de administración:** Acceso exclusivo para admins mediante URL oculta.
- 📱 **Frontend responsivo:** Interfaz moderna y adaptable a móviles y escritorio.
- 🛡️ **Seguridad:** Rate limiting, sanitización y validación de datos.
- 🧪 **Pruebas automáticas:** Tests de rutas y roles con reporte PDF.
- 🐳 **Despliegue fácil:** Docker y Docker Compose listos para cualquier entorno.

---

## 📁 Estructura del proyecto

```text
├── src/
│   ├── app.js                  # Punto de entrada principal
│   ├── config/                 # Configuración de servidor, base de datos y variables de entorno
│   ├── domain/                 # Modelos de datos (Usuarios, Contratos, Préstamos, etc.)
│   ├── infrastructure/
│   │   ├── controllers/        # Lógica de negocio y generación de documentos
│   │   └── services/           # Servicios de negocio
│   ├── interfaces/
│   │   ├── routes/             # Definición de rutas Express
│   │   └── views/              # Vistas EJS (login, registro, index, PDF, errores)
│   └── shared/
│       ├── errors/             # Manejo de errores personalizados
│       ├── middleware/         # Middlewares de autenticación y seguridad
│       └── utils/              # Utilidades y mensajes del chatbot
├── public/                     # Estáticos: CSS, JS, imágenes, PDFs
├── test/                       # Pruebas automáticas
├── .github/                    # Workflows y scripts de CI
├── package.json
├── Dockerfile
├── docker-compose.yml
├── .env
└── README.md
```

---

## ⚡ Instalación y ejecución local

1. **Clona el repositorio:**
   ```sh
   git clone <URL-del-repo>
   cd Proyecto_ChatBot
   ```
2. **Instala las dependencias:**
   ```sh
   npm install
   ```
3. **Configura el archivo `.env`:**
   ```env
   PUERTO=1010
   JWT_SECRET=tu_clave_secreta
   WIT_TOKEN=tu_token_de_wit_ai
   MONGO_URI=mongodb://localhost:27017/raizfinanciera
   ```
4. **Inicia MongoDB** (si no está corriendo).
5. **Ejecuta el servidor:**
   - En desarrollo:
     ```sh
     npm run dev
     ```
   - En producción:
     ```sh
     npm start
     ```
6. **Abre:** [http://localhost:1010](http://localhost:1010)

---

## 🐳 Ejecución con Docker y Docker Compose

1. **Asegúrate de tener Docker y Docker Compose instalados.**
2. **Configura tu `.env`** (usa `MONGO_URI=mongodb://mongo:27017/raizfinanciera`).
3. **Levanta la app y la base de datos:**
   ```sh
   docker compose up --build
   ```
4. **Abre:** [http://localhost:1010](http://localhost:1010)
5. **Detén los servicios:**
   ```sh
   docker compose down
   ```
> El archivo `docker-compose.yml` ya incluye MongoDB. ¡No necesitas instalarlo localmente!

---

## 🧪 Pruebas automáticas

- Las pruebas están en `test/app.test.mjs`.
- Ejecuta:
  ```sh
  npx mocha test/app.test.mjs
  ```
- Se validan rutas públicas, protegidas por rol y de error.

---

## 📊 Reporte PDF de tests (CI/CD)

- Workflow en `.github/workflows/generate-pdf-report.yml`.
- Al hacer push a `main`:
  1. Se ejecutan los tests.
  2. Se genera un PDF con el resumen y detalle usando Puppeteer.
  3. El PDF queda como artefacto descargable en GitHub Actions.

---

## 🔌 Pruebas de la API con Postman

1. Descarga [`RaizFinanciera.postman_collection.json`](RaizFinanciera.postman_collection.json).
2. Importa en Postman.
3. Modifica los datos de ejemplo según tus pruebas.
4. Si algún endpoint requiere token, haz login y usa el token en las variables de entorno de Postman.

---

## 🛡️ Seguridad

- Acceso a rutas administrativas solo mediante URL oculta.
- Validaciones, sanitización y manejo de errores personalizados.
- JWT y cookies seguras para autenticación y autorización.

---

## 📚 Documentación Swagger

- [http://localhost:1010/api-docs/](http://localhost:1010/api-docs/)

---

## 👨‍💻 Créditos

Desarrollado por **Grupo 2 - Universidad Mayor**.

---

> **Nota:** Este proyecto es solo para fines educativos y de demostración. No utilizar en producción sin una revisión exhaustiva de seguridad.